type: edu
custom_name: stage2
files:
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.hyperskill.hstest.dynamic.DynamicTest;

    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        @DynamicTest
        CheckResult test1_checkCardCredentials() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String correctCardNumber = cardNumberMatcher.group();

            output = program.execute("1");
            cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String anotherCardNumber = cardNumberMatcher.group();

            if (anotherCardNumber.equals(correctCardNumber)) {
                return CheckResult.wrong("Your program generates two identical card numbers!");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkLogInAndLogOut() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return new CheckResult(false, "You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }
            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should be signed in after " +
                    "entering the correct card information.");
            }

            output = program.execute("2");

            if (!output.toLowerCase().contains("create")) {
                return new CheckResult(false, "The user should be logged out after choosing 'Log out' option.\n" +
                    "And you should print the menu with 'Create an account' option.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example!");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed in after" +
                    " entering incorrect card information.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test4_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number " +
                    "and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();

            Random random = new Random();

            String correctPin = pinMatcher.group().trim();
            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed" +
                    " in after entering the information of a non-existing card.");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test5_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("1");

            if (!output.contains("0")) {
                return new CheckResult(false, "Expected balance: 0");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLuhnAlgorithm() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            boolean isSomeCardFound = false;
            int foundCards = 0;

            while (cardNumberMatcher.find()) {

                foundCards++;

                if (!isSomeCardFound) {
                    isSomeCardFound = true;
                }

                String cardNumber = cardNumberMatcher.group();

                if (!checkLuhnAlgorithm(cardNumber)) {
                    return new CheckResult(false, String.format("The card number %s doesnâ€™t pass the Luhn algorithm.", cardNumber));
                }
            }

            if (!isSomeCardFound) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            if (foundCards != 20) {
                return new CheckResult(false, "Tried to generate 20 cards, but found " + foundCards);
            }

            return CheckResult.correct();
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }
    }
  learner_created: false
- name: src/banking/Bank.java
  visible: true
  text: |
    package banking;

    import java.util.HashMap;
    import java.util.Map;

    public class Bank {
        private final String BANK_ID;

        private Map<String, Card> issuedCards = new HashMap<>();

        public Bank(String bankId) {
            BANK_ID = bankId;
        }

        public String createAccount() {
            Card card = CardIssuer.issue(BANK_ID);
            String pin = CardIssuer.getLastGeneratedPin();
            issuedCards.put(card.toString(), card);
            return "Your card number:\n" + card + "\n" +
                    "Your card PIN:\n" + pin;
        }

        public boolean login(String cardNumber, String pin) {
            if (issuedCards.containsKey(cardNumber)) {
                return issuedCards.get(cardNumber).isCorrectPin(pin);
            }
            return false;
        }

        public int getCardBalance(String cardNumber) {
            return issuedCards.get(cardNumber).getBalance();
        }
    }
  learner_created: true
- name: src/banking/Card.java
  visible: true
  text: |
    package banking;

    public class Card {
        private final String BANK_ID_NUMBER;
        private final String ACCOUNT_NUMBER;
        private final String CHECKSUM;
        private String pinHash;
        private int balance = 0;

        public Card(String bankIdNumber,String accountNumber, String checksum, String pin) {
            BANK_ID_NUMBER = bankIdNumber;
            ACCOUNT_NUMBER = accountNumber;
            CHECKSUM = checksum;
            pinHash = Util.sha256Hash(pin);
        }

        public boolean isCorrectPin(String pin) {
            return pinHash.equals(Util.sha256Hash(pin));
        }

        public int getBalance() {
            return balance;
        }

        @Override
        public String toString() {
            return "" + BANK_ID_NUMBER + ACCOUNT_NUMBER + CHECKSUM;
        }
    }
  learner_created: true
- name: src/banking/CardIssuer.java
  visible: true
  text: |+
    package banking;

    import java.util.HashMap;
    import java.util.HashSet;
    import java.util.Map;
    import java.util.Random;
    import java.util.Set;

    public class CardIssuer {
        private static final int ACC_NR_LENGTH = 9;
        private static final int PIN_LENGTH = 4;
        private static final Random RANDOM = new Random();
        private static String lastGeneratedPin;

        private static final Map<String, Set<String>> ACCOUNT_NUMBERS = new HashMap<>();

        public static Card issue(String bankId) {
            String accountNumber = generateUniqueAccountNumber(bankId);
            String checksum = getChecksum(bankId, accountNumber);
            lastGeneratedPin = generatePin();
            return new Card(bankId, accountNumber, checksum, lastGeneratedPin);
        }

        private static String generateUniqueAccountNumber(String bankId) {
            ACCOUNT_NUMBERS.putIfAbsent(bankId, new HashSet<>());
            String number;
            do {
                number = generateDigits(ACC_NR_LENGTH);
            } while (ACCOUNT_NUMBERS.get(bankId).contains(number));

            ACCOUNT_NUMBERS.get(bankId).add(number);
            return number;
        }

        private static String generatePin() {
            return generateDigits(PIN_LENGTH);
        }

        private static String generateDigits(int n) {
            StringBuilder digits = new StringBuilder(n);
            for (int i = 0; i < n; ++i) {
                digits.append((char) (RANDOM.nextInt(10) + '0'));
            }
            return digits.toString();
        }

        private static String getChecksum(String bankId, String accountNumber) {
            return "" + Math.abs((bankId.hashCode() + accountNumber.hashCode()) % 10);
        }

        public static String getLastGeneratedPin() {
            String pin = lastGeneratedPin;
            lastGeneratedPin = "";
            return pin;
        }
    }

  learner_created: true
- name: src/banking/Util.java
  visible: true
  text: |
    package banking;

    import java.nio.charset.StandardCharsets;
    import java.security.MessageDigest;
    import java.security.NoSuchAlgorithmException;

    public class Util {
        public static String sha256Hash(String s) {
            StringBuilder hexStr = new StringBuilder(64);
            try {
                byte[] hash = MessageDigest.getInstance("SHA-256")
                        .digest(s.getBytes(StandardCharsets.UTF_8));
                for (byte b : hash) {
                    String hex = Integer.toHexString(0xff & b);
                    if (hex.length() == 1) {
                        hexStr.append('0');
                    }
                    hexStr.append(hex);
                }
            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
            }
            return hexStr.toString();
        }
    }
  learner_created: true
- name: src/banking/UI.java
  visible: true
  text: |
    package banking;

    import java.util.Scanner;

    public class UI {
        private static final Scanner SCN = new Scanner(System.in);

        private final Bank BANK = new Bank("400000");

        private String sessionCard = "";

        public void start() {
            mainMenu();
            System.out.println("Bye!");
        }

        private void mainMenu() {
            boolean run = true;
            while (run) {
                printMainMenu();
                int choice = readInt();
                switch (choice) {
                    case 1:
                        System.out.println(BANK.createAccount());
                        break;
                    case 2:
                        if (loginAttempt()) {
                            System.out.println("You have successfully logged in!");
                            run = sessionMenu();
                        } else {
                            System.out.println("Wrong card number or PIN!");
                        }
                        break;
                    case 0:
                        run = false;
                        break;
                    default:
                        System.out.println("Invalid command.");
                }
            }
        }

        private boolean loginAttempt() {
            System.out.println("Enter your card number:");
            String cardNumber = readLn();
            System.out.println("Enter your PIN:");
            String pin = readLn();
            if (BANK.login(cardNumber, pin)) {
                sessionCard = cardNumber;
                return true;
            }
            return false;
        }

        private boolean sessionMenu() {
            boolean run = true;
            while (run) {
                printSessionMenu();
                int choice = readInt();
                switch (choice) {
                    case 1:
                        displayBalance();
                        break;
                    case 2:
                        System.out.println("You have successfully logged out!");
                        run = false;
                        break;
                    case 0:
                        return false;
                    default:
                        System.out.println("Invalid command.");
                }
            }
            return true;
        }

        private void displayBalance() {
            int balance = BANK.getCardBalance(sessionCard);
            System.out.println("Balance: " + balance);
        }

        private void printMainMenu() {
            System.out.println("1. Create an account\n" +
                            "2. Log into account\n" +
                            "0. Exit");
        }

        private void printSessionMenu() {
            System.out.println("1. Balance\n" +
                    "2. Log out\n" +
                    "0. Exit");
        }

        private static int readInt() {
            return Integer.parseInt(SCN.nextLine());
        }

        private static String readLn() {
            return SCN.nextLine();
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/8426#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 21 Jan 2022 02:17:42 UTC
record: 2
