type: edu
custom_name: stage3
files:
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;
    import org.junit.BeforeClass;

    import java.io.File;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.ResultSet;
    import java.sql.SQLException;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final String databaseFileName = "card.s3db";
        private static final String tempDatabaseFileName = "tempDatabase.s3db";
        private static final String[] args = {"-fileName", databaseFileName};
        private static final Map<String, String> correctData = new HashMap<>();

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        private static Connection connection;


        @DynamicTest
        CheckResult test1_checkDatabaseFile() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("You should create a database file " +
                    "named " + databaseFileName + ". The file name should be taken from the command line arguments.\n" +
                    "The database file shouldn't be deleted after stopping the program!");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkConnection() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            getConnection();
            closeConnection();

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkIfTableExists() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery(
                    "SELECT name FROM sqlite_master WHERE type ='table' AND name NOT LIKE 'sqlite_%';");
                while (resultSet.next()) {
                    if (resultSet.getString("name").equals("card")) {
                        return CheckResult.correct();
                    }
                }
            } catch (SQLException e) {
                return CheckResult.wrong("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.wrong("Your database doesn't have a table named 'card'");
        }

        @DynamicTest
        CheckResult test4_checkColumns() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("PRAGMA table_info(card);");
                Map<String, String> columns = new HashMap<>();

                while (resultSet.next()) {
                    columns.put(resultSet.getString("name").toLowerCase(), resultSet.getString("type").toUpperCase());
                }

                String[][] correctColumns = {
                    {"id", "INTEGER", "INT"},
                    {"number", "TEXT", "VARCHAR"},
                    {"pin", "TEXT", "VARCHAR"},
                    {"balance", "INTEGER", "INT"}};

                for (String[] correctColumn : correctColumns) {
                    String errorMessage = "Can't find '" + correctColumn[0] + "' column with '" + correctColumn[1] + "' type.\n" +
                        "Your table should have columns described in " +
                        "the stage instructions.";
                    if (!columns.containsKey(correctColumn[0])) {
                        return CheckResult.wrong(errorMessage);
                    } else if (!columns.get(correctColumn[0]).contains(correctColumn[1]) && !columns.get(correctColumn[0]).contains(correctColumn[2])) {
                        return CheckResult.wrong(errorMessage);
                    }
                }
            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect to the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }


        @DynamicTest
        CheckResult test5_checkAddingRowsToTheTable() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM card");
                Map<String, String> userData = new HashMap<>();

                while (resultSet.next()) {
                    System.out.println(resultSet.getString("number"));
                    if (resultSet.getString("number") == null) {
                        return CheckResult.wrong("The card number shouldn't be null in the database!");
                    }
                    if (resultSet.getInt("balance") != 0) {
                        return CheckResult.wrong("Default balance value should be 0 in the database!");
                    }
                    if (resultSet.getString("pin") == null) {
                        return CheckResult.wrong("The PIN shouldn't be null in the database!");
                    }
                    userData.put(resultSet.getString("number"), resultSet.getString("pin"));
                }

                for (Map.Entry<String, String> entry : correctData.entrySet()) {
                    if (!userData.containsKey(entry.getKey())) {
                        return CheckResult.wrong("Your database doesn't save newly created cards.");
                    } else if (!userData.get(entry.getKey()).equals(entry.getValue())) {
                        return CheckResult.wrong("Correct PIN for card number " + entry.getKey() + " should " +
                            "be " + entry.getValue());
                    }
                }


            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLogIn() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example:" +
                    " 400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is a digit.");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should be signed in after" +
                    " entering the correct card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test7_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test8_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test9_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);

            output = program.execute("1");

            if (!output.contains("0")) {
                return CheckResult.wrong("Expected balance: 0");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        private static Connection getConnection() {
            if (connection == null) {
                try {
                    connection = DriverManager.getConnection("jdbc:sqlite:" + databaseFileName);
                } catch (SQLException exception) {
                    throw new WrongAnswer("Can't connect to the database! Make sure you close your database" +
                        " connection at the end of the program!");
                }
            }
            return connection;
        }

        private static void closeConnection() {
            if (connection == null)
                return;
            try {
                connection.close();
            } catch (SQLException ignored) {
            }
            connection = null;
        }

        @BeforeClass
        public static void createTempDatabase() throws IOException {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!userDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(tempDbFile);
                Files.copy(userDbFile, tempDbFile);
            } catch (Exception ignored) {}
        }

        @AfterClass
        public static void deleteTempDatabase() throws IOException {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!tempDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(userDbFile);
                Files.move(tempDbFile, userDbFile);
            } catch (Exception ignored) {}
        }

        private boolean getData(String out) {

            Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
            Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

            Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
            Matcher pinMatcher = pinPattern.matcher(out);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return false;
            }

            String number = cardNumberMatcher.group();
            String PIN = pinMatcher.group();

            if (!checkLuhnAlgorithm(number)) {
                return false;
            }

            correctData.put(number, PIN);

            return true;
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }

        private void deleteAllRows() {
            try {
                getConnection().createStatement().execute("DELETE FROM card");
                closeConnection();
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }

        private void stopAndCheckIfUserProgramWasStopped(TestedProgram program) {
            program.execute("0");
            if (!program.isFinished()) {
                throw new WrongAnswer("After choosing 'Exit' item you should stop your program" +
                    " and close database connection!");
            }
        }
    }
  learner_created: false
- name: src/banking/Bank.java
  visible: true
  text: |
    package banking;

    import java.util.HashMap;
    import java.util.Map;

    public class Bank {
        private final String BANK_ID;

        private Map<String, Card> issuedCards = new HashMap<>();

        public Bank(String bankId) {
            BANK_ID = bankId;
        }

        public String createAccount() {
            Card card = CardIssuer.issue(BANK_ID);
            String pin = CardIssuer.getLastGeneratedPin();
            issuedCards.put(card.toString(), card);
            return "Your card number:\n" + card + "\n" +
                    "Your card PIN:\n" + pin;
        }

        public boolean login(String cardNumber, String pin) {
            if (issuedCards.containsKey(cardNumber)) {
                return issuedCards.get(cardNumber).isCorrectPin(pin);
            }
            return false;
        }

        public int getCardBalance(String cardNumber) {
            return issuedCards.get(cardNumber).getBalance();
        }
    }
  learner_created: true
- name: src/banking/Card.java
  visible: true
  text: |
    package banking;

    public class Card {
        private final String BANK_ID_NUMBER;
        private final String ACCOUNT_NUMBER;
        private final String CHECKSUM;
        private String pinHash;
        private int balance = 0;

        public Card(String bankIdNumber,String accountNumber, String checksum, String pin) {
            BANK_ID_NUMBER = bankIdNumber;
            ACCOUNT_NUMBER = accountNumber;
            CHECKSUM = checksum;
            pinHash = Util.sha256Hash(pin);
        }

        public boolean isCorrectPin(String pin) {
            return pinHash.equals(Util.sha256Hash(pin));
        }

        public int getBalance() {
            return balance;
        }

        @Override
        public String toString() {
            return "" + BANK_ID_NUMBER + ACCOUNT_NUMBER + CHECKSUM;
        }
    }
  learner_created: true
- name: src/banking/CardIssuer.java
  visible: true
  text: |+
    package banking;

    import java.util.*;
    import java.util.stream.IntStream;

    public class CardIssuer {
        private static final int ACC_NR_LENGTH = 9;
        private static final int PIN_LENGTH = 4;
        private static final Random RANDOM = new Random();
        private static String lastGeneratedPin;

        private static final Map<String, Set<String>> ACCOUNT_NUMBERS = new HashMap<>();

        public static Card issue(String bankId) {
            String accountNumber = generateUniqueAccountNumber(bankId);
            String checksum = getChecksum(bankId, accountNumber);
            lastGeneratedPin = generatePin();
            return new Card(bankId, accountNumber, checksum, lastGeneratedPin);
        }

        private static String generateUniqueAccountNumber(String bankId) {
            ACCOUNT_NUMBERS.putIfAbsent(bankId, new HashSet<>());
            String number;
            do {
                number = generateDigits(ACC_NR_LENGTH);
            } while (ACCOUNT_NUMBERS.get(bankId).contains(number));

            ACCOUNT_NUMBERS.get(bankId).add(number);
            return number;
        }

        private static String generatePin() {
            return generateDigits(PIN_LENGTH);
        }

        private static String generateDigits(int n) {
            StringBuilder digits = new StringBuilder(n);
            for (int i = 0; i < n; ++i) {
                digits.append((char) (RANDOM.nextInt(10) + '0'));
            }
            return digits.toString();
        }

        private static String getChecksum(String bankId, String accountNumber) {
            int[] nums = (bankId + accountNumber).chars()
                    .map(c -> c - '0').toArray();
            int checksum = 10 - IntStream.range(0, nums.length)
                    .map(i -> i % 2 == 0 ? nums[i] >= 5 ? 1 + (2 * (nums[i] - 5)) : nums[i] * 2 : nums[i])
                    .sum() % 10;
            return "" + (checksum % 10);
        }

        public static String getLastGeneratedPin() {
            String pin = lastGeneratedPin;
            lastGeneratedPin = "";
            return pin;
        }
    }

  learner_created: true
- name: src/banking/Util.java
  visible: true
  text: |
    package banking;

    import java.nio.charset.StandardCharsets;
    import java.security.MessageDigest;
    import java.security.NoSuchAlgorithmException;

    public class Util {
        public static String sha256Hash(String s) {
            StringBuilder hexStr = new StringBuilder(64);
            try {
                byte[] hash = MessageDigest.getInstance("SHA-256")
                        .digest(s.getBytes(StandardCharsets.UTF_8));
                for (byte b : hash) {
                    String hex = Integer.toHexString(0xff & b);
                    if (hex.length() == 1) {
                        hexStr.append('0');
                    }
                    hexStr.append(hex);
                }
            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
            }
            return hexStr.toString();
        }
    }
  learner_created: true
- name: src/banking/UI.java
  visible: true
  text: |
    package banking;

    import java.util.Scanner;

    public class UI {
        private static final Scanner SCN = new Scanner(System.in);

        private final Bank BANK = new Bank("400000");

        private String sessionCard = "";

        public void start() {
            mainMenu();
            System.out.println("Bye!");
        }

        private void mainMenu() {
            boolean run = true;
            while (run) {
                printMainMenu();
                int choice = readInt();
                switch (choice) {
                    case 1:
                        System.out.println(BANK.createAccount());
                        break;
                    case 2:
                        if (loginAttempt()) {
                            System.out.println("You have successfully logged in!");
                            run = sessionMenu();
                        } else {
                            System.out.println("Wrong card number or PIN!");
                        }
                        break;
                    case 0:
                        run = false;
                        break;
                    default:
                        System.out.println("Invalid command.");
                }
            }
        }

        private boolean loginAttempt() {
            System.out.println("Enter your card number:");
            String cardNumber = readLn();
            System.out.println("Enter your PIN:");
            String pin = readLn();
            if (BANK.login(cardNumber, pin)) {
                sessionCard = cardNumber;
                return true;
            }
            return false;
        }

        private boolean sessionMenu() {
            boolean run = true;
            while (run) {
                printSessionMenu();
                int choice = readInt();
                switch (choice) {
                    case 1:
                        displayBalance();
                        break;
                    case 2:
                        System.out.println("You have successfully logged out!");
                        run = false;
                        break;
                    case 0:
                        return false;
                    default:
                        System.out.println("Invalid command.");
                }
            }
            return true;
        }

        private void displayBalance() {
            int balance = BANK.getCardBalance(sessionCard);
            System.out.println("Balance: " + balance);
        }

        private void printMainMenu() {
            System.out.println("1. Create an account\n" +
                            "2. Log into account\n" +
                            "0. Exit");
        }

        private void printSessionMenu() {
            System.out.println("1. Balance\n" +
                    "2. Log out\n" +
                    "0. Exit");
        }

        private static int readInt() {
            return Integer.parseInt(SCN.nextLine());
        }

        private static String readLn() {
            return SCN.nextLine();
        }
    }
  learner_created: true
- name: src/banking/DB.java
  visible: true
  learner_created: true
- name: card.s3db
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/8427#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 28 Jan 2022 02:06:17 UTC
record: -1
